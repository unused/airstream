#!/usr/bin/env ruby

require 'airstream'
require 'dnssd'

def self.exit(status)
  Airstream::Io.show_input
  puts "\n" # clear output
  super status
end

def parse_time(time)
  res = time.match("([0-9]*)m(?:i?n?u?t?e?s?)?(?:([0-9]*)s(?:e?c?o?n?d?s?)?)?")
  if res.nil?
    res = time.match("([0-9]*):([0-9]*)")
  end
  unless res.nil?
    seconds = res[1].to_i * 60
    unless res[2].nil?
      seconds += res[2].to_i
    end
    return seconds
  end
  time.to_i
end

$options = options = {
  receiver: nil,
  quiet: false,
  verbose: false,
  time: nil,
  # disable_local_http: true
}

CONFIG_FILE = File.join(ENV['HOME'] || '', '.airstreamrc')

EXIT_OK = 0
EXIT_ERROR = 1
EXIT_NO_HOST = 68

UPDATE_TIMEOUT = 0.2

if File.exists? CONFIG_FILE
  options_config = YAML.load_file(CONFIG_FILE)
  options.merge!(options_config)
else
  File.open(CONFIG_FILE,'w') { |file| YAML::dump(options,file) }
  STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
end

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "offer a video file to an airplay device

Usage: #{executable_name} [options] [url|path/]filename

Basic options: (configure default in ~/.airstreamrc)
"

  opts.on("-o receiver",
   "the airplay-device ip-address or domain") do |receiver|
    options[:receiver] = receiver
  end

  opts.on("-t time",
    "jump to a specific time in seconds or in minutes (i.e. 10m30s)") do |time|
    options[:time] = parse_time(time)
  end

  opts.on("-q","--quiet",
   "prevent most of the output") do |quiet|
    options[:quiet] = quiet
  end

  opts.on("--verbose",
   "additional output") do |verbose|
    options[:verbose] = verbose
  end

  # opts.on("--disable-use-httpd",
  #  "do not create httpd to offer local files") do |disable_httpd|
  #   options[:disable_local_httpd] = true
  # end

  opts.on("-v", "--version",
   "output version information then quit") do |path|
    puts "airstream v" + Airstream::VERSION
    exit EXIT_OK
  end
end

if ARGV.empty?
  STDERR.puts "No arguments given"
  STDERR.puts option_parser
  exit EXIT_ERROR
end


begin
  option_parser.parse!
rescue OptionParser::InvalidArgument => ex
  STDERR.puts ex.message
  STDERR.puts option_parser
  exit EXIT_ERROR
end

def stream(receiver)
  begin
    options = $options
    playlist = ARGV
    io = Airstream::Io.new
    io.quiet = options[:quiet]
    io.verbose = options[:verbose]
    node = Airstream::Node.new receiver
    device = Airstream::Device.new node
    io.puts "loading can take a few seconds..."
    playlist.map! { |file| Airstream::Video.new(file) }
    player = Airstream::Player.new device, playlist
    if options[:time]
      player.seek(options[:time])
    end

    io.puts "=> press ["+Airstream::Io::KEY_QUIT+"] to exit airstream"
    Airstream::Io.hide_input
    pbar = ProgressBar.create({ format: '%t |%b%i| %p%%', total: player.duration })
    begin # reconsider playing...
      sleep UPDATE_TIMEOUT
      formatted_time = Time.at(player.elapsed_time).gmtime.strftime('%R:%S')
      current_title = player.current_title.to_s
      title = current_title[0..[30, current_title.length].min]
      pbar.title = "#{title} #{formatted_time}"
      pbar.progress = player.elapsed_time
      io.catch_input
      player.update io
    end until io.quit? || player.finished?
    pbar.finish

  rescue Airplay::Protocol::InvalidMediaError
    STDERR.puts
    STDERR.puts "invalid media file"
    exit EXIT_ERROR
  # rescue NoMethodError # @FIX webrick raises no method error
  #   STDERR.puts
  #   STDERR.puts "file host shutdown"
  #   exit EXIT_OK
  rescue Interrupt
    STDERR.puts
    STDERR.puts "exiting"
    exit EXIT_ERROR
  ensure
    Airstream::Io.show_input
  end
end

unless options[:receiver]
  wait = 0
  apple_tv_found = false

  DNSSD.browse '_airplay._tcp' do |reply|
    DNSSD.resolve reply.name, '_airplay._tcp', 'local' do |reply|
      if reply.text_record["model"].match(/AppleTV/)
        DNSSD::Service.new.getaddrinfo(reply.target, 1) do |addr|
          puts "Apple TV: #{reply.target} (#{addr.address})"
          apple_tv_found = true
          stream(addr.address)
        end
      end
    end
  end

  while true do
    sleep(1)
    wait += 1
    if wait > 5 and !apple_tv_found
      STDERR.puts "Couldn't find Apple TV"
      exit EXIT_NO_HOST
    end
  end
else
  stream(options[:receiver])
end

exit EXIT_OK
